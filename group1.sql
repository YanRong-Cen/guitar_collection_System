--------------------------------------------------------
--  File created - Sunday-July-28-2024   
--------------------------------------------------------
DROP SEQUENCE "GROUP1"."CLIENT_NAME_SEQ";
DROP SEQUENCE "GROUP1"."CLIENT_SEQ";
DROP SEQUENCE "GROUP1"."CUSTOMER_SEQ";
DROP SEQUENCE "GROUP1"."DEPARTMENT_SEQ";
DROP SEQUENCE "GROUP1"."DURATION_SEQ";
DROP SEQUENCE "GROUP1"."EMPLOYEE_MAINTENANCE_RELATION_SEQ";
DROP SEQUENCE "GROUP1"."EMPLOYEE_PHONE_SEQ";
DROP SEQUENCE "GROUP1"."EMPLOYEE_SEQ";
DROP SEQUENCE "GROUP1"."GUITAR_SEQ";
DROP SEQUENCE "GROUP1"."MAINTENANCE_DURATION_SEQ";
DROP SEQUENCE "GROUP1"."MAINTENANCE_SEQ";
DROP SEQUENCE "GROUP1"."NAME_SEQ";
DROP SEQUENCE "GROUP1"."OWNER_SEQ";
DROP SEQUENCE "GROUP1"."PHONE_SEQ";
DROP SEQUENCE "GROUP1"."PHOTO_SEQ";
DROP TABLE "GROUP1"."T_CLIENT" cascade constraints;
DROP TABLE "GROUP1"."T_CLIENT_NAME" cascade constraints;
DROP TABLE "GROUP1"."T_CUSTOMER" cascade constraints;
DROP TABLE "GROUP1"."T_DEPARTMENT" cascade constraints;
DROP TABLE "GROUP1"."T_DURATION" cascade constraints;
DROP TABLE "GROUP1"."T_EMPLOYEE" cascade constraints;
DROP TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" cascade constraints;
DROP TABLE "GROUP1"."T_EMPLOYEE_PHONE" cascade constraints;
DROP TABLE "GROUP1"."T_GUITAR" cascade constraints;
DROP TABLE "GROUP1"."T_MAINTENANCE" cascade constraints;
DROP TABLE "GROUP1"."T_MAINTENANCE_DURATION" cascade constraints;
DROP TABLE "GROUP1"."T_NAME" cascade constraints;
DROP TABLE "GROUP1"."T_OWNER" cascade constraints;
DROP TABLE "GROUP1"."T_PHONE" cascade constraints;
DROP TABLE "GROUP1"."T_PHOTO" cascade constraints;
DROP VIEW "GROUP1"."V_EMPLOYEE";
DROP VIEW "GROUP1"."V_MAINTENANCE";
DROP VIEW "GROUP1"."V_OWNER";
DROP PROCEDURE "GROUP1"."POPULATE_ALL_TABLES";
DROP PACKAGE "GROUP1"."EMPLOYEE_PKG";
DROP PACKAGE "GROUP1"."MAINTENANCE_PKG";
DROP PACKAGE "GROUP1"."OWNER_PKG";
DROP PACKAGE BODY "GROUP1"."EMPLOYEE_PKG";
DROP PACKAGE BODY "GROUP1"."MAINTENANCE_PKG";
DROP PACKAGE BODY "GROUP1"."OWNER_PKG";
--------------------------------------------------------
--  DDL for Sequence CLIENT_NAME_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."CLIENT_NAME_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CLIENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."CLIENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CUSTOMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."CUSTOMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DEPARTMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."DEPARTMENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DURATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."DURATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EMPLOYEE_MAINTENANCE_RELATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."EMPLOYEE_MAINTENANCE_RELATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EMPLOYEE_PHONE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."EMPLOYEE_PHONE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EMPLOYEE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."EMPLOYEE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence GUITAR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."GUITAR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MAINTENANCE_DURATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."MAINTENANCE_DURATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MAINTENANCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."MAINTENANCE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence NAME_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."NAME_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence OWNER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."OWNER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 140 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PHONE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."PHONE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PHOTO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUP1"."PHOTO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table T_CLIENT
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_CLIENT" 
   (	"CLIENT_ID" VARCHAR2(36 BYTE), 
	"GENDER" VARCHAR2(20 BYTE), 
	"PHONE_NUMBER" CHAR(11 BYTE), 
	"EMAIL_ADDRESS" VARCHAR2(50 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CLIENT_NAME
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_CLIENT_NAME" 
   (	"CLIENT_NAME_ID" VARCHAR2(36 BYTE), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"CLIENT_ID" VARCHAR2(36 BYTE), 
	"NAME_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_CUSTOMER
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_CUSTOMER" 
   (	"CUSTOMER_ID" VARCHAR2(36 BYTE), 
	"CLIENT_ID" VARCHAR2(36 BYTE), 
	"TYPE" NUMBER, 
	"REFERRER" VARCHAR2(50 BYTE), 
	"NOTES" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DEPARTMENT
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_DEPARTMENT" 
   (	"DEPARTMENT_ID" VARCHAR2(36 BYTE), 
	"NAME" VARCHAR2(100 BYTE), 
	"DESCRIPTION" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_DURATION
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_DURATION" 
   (	"DURATION_ID" VARCHAR2(36 BYTE), 
	"START_DATE" DATE, 
	"END_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_EMPLOYEE" 
   (	"EMPLOYEE_ID" VARCHAR2(36 BYTE), 
	"NAME" VARCHAR2(50 BYTE), 
	"EMAIL_ADDRESS" VARCHAR2(20 BYTE), 
	"DEPARTMENT_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_EMPLOYEE_MAINTENANCE_RELATION
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" 
   (	"ID" VARCHAR2(36 BYTE), 
	"MAINTENANCE_ID" VARCHAR2(36 BYTE), 
	"EMPLOYEE_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_EMPLOYEE_PHONE
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_EMPLOYEE_PHONE" 
   (	"EMPLOYEE_PHONE_ID" VARCHAR2(36 BYTE), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"EMPLOYEE_ID" VARCHAR2(36 BYTE), 
	"PHONE_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_GUITAR
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_GUITAR" 
   (	"GUITAR_ID" VARCHAR2(36 BYTE), 
	"OWNER_ID" VARCHAR2(36 BYTE), 
	"NAME" VARCHAR2(100 BYTE), 
	"BRAND" VARCHAR2(100 BYTE), 
	"TYPE" VARCHAR2(20 BYTE), 
	"PRODUCTION_DATE" DATE, 
	"PURCHASE_DATE" DATE, 
	"PRICE" NUMBER(10,2), 
	"NOTE" VARCHAR2(200 BYTE), 
	"CONDITION" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MAINTENANCE
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_MAINTENANCE" 
   (	"MAINTENANCE_ID" VARCHAR2(36 BYTE), 
	"GUITAR_ID" VARCHAR2(36 BYTE), 
	"COST" NUMBER(10,2), 
	"DESCRIPTION" VARCHAR2(500 BYTE), 
	"STATUS" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MAINTENANCE_DURATION
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_MAINTENANCE_DURATION" 
   (	"MAINTENANCE_DURATION_ID" VARCHAR2(36 BYTE), 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"DURATION_ID" VARCHAR2(36 BYTE), 
	"MAINTENANCE_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_NAME
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_NAME" 
   (	"NAME_ID" VARCHAR2(36 BYTE), 
	"FIRST_NAME" VARCHAR2(50 BYTE), 
	"LAST_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_OWNER
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_OWNER" 
   (	"OWNER_ID" VARCHAR2(36 BYTE), 
	"BIRTHDAY" DATE, 
	"PROFESSION" VARCHAR2(50 BYTE), 
	"SOCIAL_MEDIA" VARCHAR2(50 BYTE), 
	"CLIENT_ID" VARCHAR2(36 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PHONE
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_PHONE" 
   (	"PHONE_ID" VARCHAR2(36 BYTE), 
	"PHONE_TYPE" VARCHAR2(10 BYTE), 
	"PHONE_NUMBER" VARCHAR2(11 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_PHOTO
--------------------------------------------------------

  CREATE TABLE "GROUP1"."T_PHOTO" 
   (	"PHOTO_ID" VARCHAR2(36 BYTE), 
	"GUITAR_ID" VARCHAR2(36 BYTE), 
	"URL" VARCHAR2(100 BYTE), 
	"DESCRIPTION" VARCHAR2(500 BYTE), 
	"DATE_TAKEN" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View V_EMPLOYEE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "GROUP1"."V_EMPLOYEE" ("EMPLOYEE_ID", "NAME", "PHONE_TYPE", "PHONE_NUMBER", "EMAIL_ADDRESS", "DEPARTMENT_ID", "DEPARTMENT_NAME", "DESCRIPTION") AS 
  select te.employee_id,
       te.name,
       tp.phone_type,
       tp.phone_number,
       te.email_address,
       te.department_id,
       td.name department_name,
       td.description
  from t_employee te
  join t_department td
    on te.department_id = td.department_id
  join t_employee_phone tep
    on te.employee_id = tep.employee_id
  join t_phone tp
    on tp.phone_id = tep.phone_id
 where tep.end_date is null

;
--------------------------------------------------------
--  DDL for View V_MAINTENANCE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "GROUP1"."V_MAINTENANCE" ("MAINTENANCE_ID", "COST", "DESCRIPTION", "STATUS", "START_DATE", "END_DATE", "GUITAR_ID", "EMPLOYEE_ID") AS 
  select tm.maintenance_id,
       tm.cost,
       tm.description,
       tm.status,
       td.start_date,
       td.end_date,
       tm.guitar_id,
       temr.employee_id
  from t_maintenance tm
  join t_maintenance_duration tmd
    on tm.maintenance_id = tmd.maintenance_id
  join t_duration td
    on tmd.duration_id = td.duration_id
  join t_employee_maintenance_relation temr
    on temr.maintenance_id = tm.maintenance_id
  join t_employee te
    on te.employee_id = temr.employee_id
 where tmd.end_date is null

;
--------------------------------------------------------
--  DDL for View V_OWNER
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "GROUP1"."V_OWNER" ("CLIENT_ID", "FIRST_NAME", "LAST_NAME", "GENDER", "PHONE_NUMBER", "EMAIL_ADDRESS", "ADDRESS", "BIRTHDAY", "PROFESSION", "SOCIAL_MEDIA") AS 
  select a.client_id,
       d.first_name,
       d.last_name,
       a.gender,
       a.phone_number,
       a.email_address,
       a.address,
       b.birthday,
       b.profession,
       b.social_media
  from t_client a
  join t_owner b
    on a.client_id = b.client_id
  join t_client_name c
    on c.client_id = a.client_id
  join t_name d
    on c.name_id = d.name_id
 where c.end_date is null

;
REM INSERTING into GROUP1.T_CLIENT
SET DEFINE OFF;
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('101                                 ','1','123        ','123','qwert');
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('120','female','12345678901',null,null);
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('121','male','12345678902',null,null);
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('122','female','12345678903',null,null);
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('123','male','12345678904',null,null);
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('124','female','12345678905',null,null);
Insert into GROUP1.T_CLIENT (CLIENT_ID,GENDER,PHONE_NUMBER,EMAIL_ADDRESS,ADDRESS) values ('125','male','12345678906',null,null);
REM INSERTING into GROUP1.T_CLIENT_NAME
SET DEFINE OFF;
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('120',to_date('24-07-28','RR-MM-DD'),null,'120','120');
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('121',to_date('24-07-28','RR-MM-DD'),null,'121','121');
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('122',to_date('24-07-28','RR-MM-DD'),null,'122','122');
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('123',to_date('24-07-28','RR-MM-DD'),null,'123','123');
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('124',to_date('24-07-28','RR-MM-DD'),null,'124','124');
Insert into GROUP1.T_CLIENT_NAME (CLIENT_NAME_ID,START_DATE,END_DATE,CLIENT_ID,NAME_ID) values ('125',to_date('24-07-28','RR-MM-DD'),null,'125','125');
REM INSERTING into GROUP1.T_CUSTOMER
SET DEFINE OFF;
REM INSERTING into GROUP1.T_DEPARTMENT
SET DEFINE OFF;
Insert into GROUP1.T_DEPARTMENT (DEPARTMENT_ID,NAME,DESCRIPTION) values ('1','A','aaaa');
Insert into GROUP1.T_DEPARTMENT (DEPARTMENT_ID,NAME,DESCRIPTION) values ('2','B','bbbb');
Insert into GROUP1.T_DEPARTMENT (DEPARTMENT_ID,NAME,DESCRIPTION) values ('3','C','cccc');
REM INSERTING into GROUP1.T_DURATION
SET DEFINE OFF;
Insert into GROUP1.T_DURATION (DURATION_ID,START_DATE,END_DATE) values ('120',to_date('24-07-01','RR-MM-DD'),to_date('24-07-02','RR-MM-DD'));
Insert into GROUP1.T_DURATION (DURATION_ID,START_DATE,END_DATE) values ('121',to_date('24-07-01','RR-MM-DD'),to_date('24-07-02','RR-MM-DD'));
Insert into GROUP1.T_DURATION (DURATION_ID,START_DATE,END_DATE) values ('122',to_date('24-07-01','RR-MM-DD'),to_date('24-07-02','RR-MM-DD'));
Insert into GROUP1.T_DURATION (DURATION_ID,START_DATE,END_DATE) values ('123',to_date('24-07-01','RR-MM-DD'),to_date('24-07-02','RR-MM-DD'));
Insert into GROUP1.T_DURATION (DURATION_ID,START_DATE,END_DATE) values ('124',to_date('24-07-01','RR-MM-DD'),to_date('24-07-02','RR-MM-DD'));
REM INSERTING into GROUP1.T_EMPLOYEE
SET DEFINE OFF;
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('141','Employee B','124@123.com','1');
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('140','Employee A','123@123.com','1');
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('142','Employee C','125@123.com','1');
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('143','Employee D','126@123.com','1');
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('144','Employee E','127@123.com','1');
Insert into GROUP1.T_EMPLOYEE (EMPLOYEE_ID,NAME,EMAIL_ADDRESS,DEPARTMENT_ID) values ('146','Employee F','128@123.com','2');
REM INSERTING into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION
SET DEFINE OFF;
Insert into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION (ID,MAINTENANCE_ID,EMPLOYEE_ID) values ('120','120','140');
Insert into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION (ID,MAINTENANCE_ID,EMPLOYEE_ID) values ('121','121','141');
Insert into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION (ID,MAINTENANCE_ID,EMPLOYEE_ID) values ('122','122','142');
Insert into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION (ID,MAINTENANCE_ID,EMPLOYEE_ID) values ('123','123','143');
Insert into GROUP1.T_EMPLOYEE_MAINTENANCE_RELATION (ID,MAINTENANCE_ID,EMPLOYEE_ID) values ('124','124','144');
REM INSERTING into GROUP1.T_EMPLOYEE_PHONE
SET DEFINE OFF;
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('140',to_date('24-07-28','RR-MM-DD'),null,'140','140');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('141',to_date('24-07-28','RR-MM-DD'),null,'141','141');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('142',to_date('24-07-28','RR-MM-DD'),null,'142','142');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('143',to_date('24-07-28','RR-MM-DD'),null,'143','143');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('144',to_date('24-07-28','RR-MM-DD'),null,'144','144');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('145',to_date('24-07-28','RR-MM-DD'),to_date('24-07-28','RR-MM-DD'),'146','146');
Insert into GROUP1.T_EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID,START_DATE,END_DATE,EMPLOYEE_ID,PHONE_ID) values ('146',to_date('24-07-28','RR-MM-DD'),null,'146','147');
REM INSERTING into GROUP1.T_GUITAR
SET DEFINE OFF;
Insert into GROUP1.T_GUITAR (GUITAR_ID,OWNER_ID,NAME,BRAND,TYPE,PRODUCTION_DATE,PURCHASE_DATE,PRICE,NOTE,CONDITION) values ('1','120','guitar1','asd','asd',to_date('24-07-01','RR-MM-DD'),to_date('24-07-08','RR-MM-DD'),120,null,null);
Insert into GROUP1.T_GUITAR (GUITAR_ID,OWNER_ID,NAME,BRAND,TYPE,PRODUCTION_DATE,PURCHASE_DATE,PRICE,NOTE,CONDITION) values ('2','121','guitar2','asd','asd',to_date('24-07-01','RR-MM-DD'),to_date('24-07-08','RR-MM-DD'),121,null,null);
Insert into GROUP1.T_GUITAR (GUITAR_ID,OWNER_ID,NAME,BRAND,TYPE,PRODUCTION_DATE,PURCHASE_DATE,PRICE,NOTE,CONDITION) values ('3','122','guitar3','asd','asd',to_date('24-07-01','RR-MM-DD'),to_date('24-07-08','RR-MM-DD'),122,null,null);
Insert into GROUP1.T_GUITAR (GUITAR_ID,OWNER_ID,NAME,BRAND,TYPE,PRODUCTION_DATE,PURCHASE_DATE,PRICE,NOTE,CONDITION) values ('4','123','guitar4','asd','asd',to_date('24-07-01','RR-MM-DD'),to_date('24-07-08','RR-MM-DD'),123,null,null);
Insert into GROUP1.T_GUITAR (GUITAR_ID,OWNER_ID,NAME,BRAND,TYPE,PRODUCTION_DATE,PURCHASE_DATE,PRICE,NOTE,CONDITION) values ('5','124','guitar5','asd','asd',to_date('24-07-01','RR-MM-DD'),to_date('24-07-08','RR-MM-DD'),124,null,null);
REM INSERTING into GROUP1.T_MAINTENANCE
SET DEFINE OFF;
Insert into GROUP1.T_MAINTENANCE (MAINTENANCE_ID,GUITAR_ID,COST,DESCRIPTION,STATUS) values ('120','1',10,'maintenance',1);
Insert into GROUP1.T_MAINTENANCE (MAINTENANCE_ID,GUITAR_ID,COST,DESCRIPTION,STATUS) values ('121','2',11,'maintenance',1);
Insert into GROUP1.T_MAINTENANCE (MAINTENANCE_ID,GUITAR_ID,COST,DESCRIPTION,STATUS) values ('122','3',12,'maintenance',1);
Insert into GROUP1.T_MAINTENANCE (MAINTENANCE_ID,GUITAR_ID,COST,DESCRIPTION,STATUS) values ('123','4',13,'maintenance',1);
Insert into GROUP1.T_MAINTENANCE (MAINTENANCE_ID,GUITAR_ID,COST,DESCRIPTION,STATUS) values ('124','5',14,'maintenance',1);
REM INSERTING into GROUP1.T_MAINTENANCE_DURATION
SET DEFINE OFF;
Insert into GROUP1.T_MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID,START_DATE,END_DATE,DURATION_ID,MAINTENANCE_ID) values ('120',to_date('24-07-28','RR-MM-DD'),null,'120','120');
Insert into GROUP1.T_MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID,START_DATE,END_DATE,DURATION_ID,MAINTENANCE_ID) values ('121',to_date('24-07-28','RR-MM-DD'),null,'121','121');
Insert into GROUP1.T_MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID,START_DATE,END_DATE,DURATION_ID,MAINTENANCE_ID) values ('122',to_date('24-07-28','RR-MM-DD'),null,'122','122');
Insert into GROUP1.T_MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID,START_DATE,END_DATE,DURATION_ID,MAINTENANCE_ID) values ('123',to_date('24-07-28','RR-MM-DD'),null,'123','123');
Insert into GROUP1.T_MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID,START_DATE,END_DATE,DURATION_ID,MAINTENANCE_ID) values ('124',to_date('24-07-28','RR-MM-DD'),null,'124','124');
REM INSERTING into GROUP1.T_NAME
SET DEFINE OFF;
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('120','A','Client');
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('121','B','Client');
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('122','C','Client');
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('123','D','Client');
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('124','E','Client');
Insert into GROUP1.T_NAME (NAME_ID,FIRST_NAME,LAST_NAME) values ('125','F','Client');
REM INSERTING into GROUP1.T_OWNER
SET DEFINE OFF;
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('100                                 ',to_date('90-01-01','RR-MM-DD'),'drgs','url','101                                 ');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('120',to_date('90-07-01','RR-MM-DD'),null,null,'120');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('121',to_date('90-08-01','RR-MM-DD'),null,null,'121');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('122',to_date('90-09-01','RR-MM-DD'),null,null,'122');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('123',to_date('90-10-01','RR-MM-DD'),null,null,'123');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('124',to_date('90-11-01','RR-MM-DD'),null,null,'124');
Insert into GROUP1.T_OWNER (OWNER_ID,BIRTHDAY,PROFESSION,SOCIAL_MEDIA,CLIENT_ID) values ('125',to_date('24-07-28','RR-MM-DD'),null,null,'125');
REM INSERTING into GROUP1.T_PHONE
SET DEFINE OFF;
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('140','home','12345678901');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('141','home','12345678902');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('142','work','12345678903');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('143','work','12345678904');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('144','work','12345678905');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('146','home','12345678906');
Insert into GROUP1.T_PHONE (PHONE_ID,PHONE_TYPE,PHONE_NUMBER) values ('147','home','12345678906');
REM INSERTING into GROUP1.T_PHOTO
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index PK_CLIENT_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_CLIENT_NAME" ON "GROUP1"."T_CLIENT_NAME" ("CLIENT_NAME_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DURATION
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_DURATION" ON "GROUP1"."T_DURATION" ("DURATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_EMPLOYEE_PHONE
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_EMPLOYEE_PHONE" ON "GROUP1"."T_EMPLOYEE_PHONE" ("EMPLOYEE_PHONE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_MAINTENANCE_DURATION
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_MAINTENANCE_DURATION" ON "GROUP1"."T_MAINTENANCE_DURATION" ("MAINTENANCE_DURATION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_CLIENT
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_CLIENT" ON "GROUP1"."T_CLIENT" ("CLIENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_CUSTOMER
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_CUSTOMER" ON "GROUP1"."T_CUSTOMER" ("CUSTOMER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_DEPARTMENT
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_DEPARTMENT" ON "GROUP1"."T_DEPARTMENT" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_EMPLOYEE
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_EMPLOYEE" ON "GROUP1"."T_EMPLOYEE" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_EMPLOYEE_MAINTENANCE_RELATION
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_EMPLOYEE_MAINTENANCE_RELATION" ON "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_GUITAR
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_GUITAR" ON "GROUP1"."T_GUITAR" ("GUITAR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_MAINTENANCE
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_MAINTENANCE" ON "GROUP1"."T_MAINTENANCE" ("MAINTENANCE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_NAME" ON "GROUP1"."T_NAME" ("NAME_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_OWNER
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_OWNER" ON "GROUP1"."T_OWNER" ("OWNER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_PHONE
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_PHONE" ON "GROUP1"."T_PHONE" ("PHONE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_T_PHOTO
--------------------------------------------------------

  CREATE UNIQUE INDEX "GROUP1"."PK_T_PHOTO" ON "GROUP1"."T_PHOTO" ("PHOTO_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger V_EMPLOYEE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "GROUP1"."V_EMPLOYEE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER" 
  instead of insert or update or delete on v_employee
  for each row
declare
  v_employee_id varchar2(36);
begin
  if UPDATING then
    UPDATE t_employee
       SET name          = :NEW.name,
           email_address = :NEW.email_address,
           department_id = :NEW.department_id
     WHERE employee_id = :OLD.employee_id;
    employee_pkg.change_phone(:OLD.employee_id,
                              :NEW.phone_type,
                              :NEW.phone_number);
  
  elsif inserting then
    v_employee_id := employee_pkg.new_employee(v_employee_id,
                                               :NEW.name,
                                               :NEW.phone_type,
                                               :NEW.phone_number,
                                               :NEW.email_address,
                                               :NEW.department_id);
  
  elsif deleting then
    v_employee_id := employee_pkg.delete_employee(:OLD.employee_id);
  end if;
end v_employee_insert_or_update_or_delete_trigger;

/
ALTER TRIGGER "GROUP1"."V_EMPLOYEE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger V_MAINTENANCE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "GROUP1"."V_MAINTENANCE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER" 
  instead of insert or update or delete on v_maintenance
  for each row
declare
  v_maintenance_id varchar2(36);
begin
  if UPDATING then
    UPDATE t_maintenance
       SET cost        = :NEW.cost,
           description = :NEW.description,
           status      = :NEW.status,
           guitar_id   = :NEW.guitar_id
     WHERE maintenance_id = :OLD.maintenance_id;
    maintenance_pkg.change_duration(:OLD.maintenance_id,
                                    :NEW.start_date,
                                    :NEW.end_date);
  
  elsif inserting then
    v_maintenance_id := maintenance_pkg.new_maintenance(v_maintenance_id,
                                                        :NEW.start_date,
                                                        :NEW.end_date,
                                                        :NEW.cost,
                                                        :NEW.description,
                                                        :NEW.status,
                                                        :NEW.guitar_id);
    insert into t_employee_maintenance_relation
      (id, maintenance_id, employee_id)
    values
      (employee_maintenance_relation_seq.nextval,
       v_maintenance_id,
       :NEW.employee_id);
  elsif deleting then
    v_maintenance_id := maintenance_pkg.delete_maintenance(:OLD.maintenance_id);
    delete from t_employee_maintenance_relation
     where maintenance_id = v_maintenance_id;
  end if;
end v_maintenance_insert_or_update_or_delete_trigger;

/
ALTER TRIGGER "GROUP1"."V_MAINTENANCE_INSERT_OR_UPDATE_OR_DELETE_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger V_OWNER_DELETE_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "GROUP1"."V_OWNER_DELETE_TRIGGER" 
  instead of delete on v_owner
  for each row
declare
  v_client_id varchar2(36);
begin
  v_client_id := owner_pkg.detele_owner(:OLD.client_id);
end v_owner_delete_trigger;

/
ALTER TRIGGER "GROUP1"."V_OWNER_DELETE_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger V_OWNER_INSERT_OR_UPDATE_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "GROUP1"."V_OWNER_INSERT_OR_UPDATE_TRIGGER" 
  instead of insert or update on v_owner
  for each row
declare
  v_client_id varchar2(36);
begin
  if UPDATING then
    UPDATE t_client
       SET gender        = :NEW.gender,
           phone_number  = :NEW.phone_number,
           email_address = :NEW.email_address,
           address       = :NEW.address
     WHERE client_id = :OLD.client_id;
    update t_owner
       set birthday     = :NEW.birthday,
           profession   = :NEW.profession,
           social_media = :NEW.social_media
     where client_id = :OLD.client_id;
    owner_pkg.change_name(:OLD.client_id, :NEW.first_name, :NEW.last_name);
  
  elsif inserting then
    v_client_id := owner_pkg.new_owner(v_client_id,
                                       :NEW.gender,
                                       :NEW.phone_number,
                                       :NEW.email_address,
                                       :NEW.address,
                                       :NEW.birthday,
                                       :NEW.profession,
                                       :NEW.social_media,
                                       :NEW.first_name,
                                       :NEW.last_name);
  end if;
end v_owner_insert_or_update_trigger;

/
ALTER TRIGGER "GROUP1"."V_OWNER_INSERT_OR_UPDATE_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Procedure POPULATE_ALL_TABLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "GROUP1"."POPULATE_ALL_TABLES" IS
    -- Variables for random data
    v_first_name VARCHAR2(50);
    v_last_name VARCHAR2(50);
    v_email VARCHAR2(100);
    v_phone VARCHAR2(15);
    v_department_id NUMBER;
    v_employee_id NUMBER;
    v_client_id NUMBER;
    v_guitar_id NUMBER;
    v_photo_id NUMBER;
    v_duration_id NUMBER;
    v_maintenance_id NUMBER;
    v_name_id NUMBER;
    v_customer_id NUMBER;
    v_date_of_birth DATE;
    v_hire_date DATE;
    v_start_date DATE;
    v_end_date DATE;

    -- Function to generate random strings
    FUNCTION random_string(p_length IN NUMBER) RETURN VARCHAR2 IS
        v_str VARCHAR2(4000);
    BEGIN
        SELECT DBMS_RANDOM.STRING('U', p_length)
        INTO v_str
        FROM DUAL;
        RETURN v_str;
    END random_string;

    -- Function to generate random dates
    FUNCTION random_date RETURN DATE IS
    BEGIN
        RETURN DATE '2000-01-01' + TRUNC(DBMS_RANDOM.VALUE(0, 365 * 20));
    END random_date;

BEGIN
    -- Insert departments
    FOR i IN 1 .. 5 LOOP
        v_department_id := i;
        INSERT INTO DEPARTMENT (DEPARTMENT_ID, DEPARTMENT_NAME, DESCRIPTION)
        VALUES (v_department_id, random_string(10), random_string(20));
    END LOOP;

    -- Insert employees
    FOR i IN 1 .. 10 LOOP
        v_employee_id := i;
        v_first_name := random_string(5);
        v_last_name := random_string(7);
        v_email := v_first_name || '.' || v_last_name || '@example.com';
        v_hire_date := random_date;
        v_department_id := TRUNC(DBMS_RANDOM.VALUE(1, 6));

        INSERT INTO EMPLOYEE (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL_ADDRESS, DEPARTMENT_ID, HIRE_DATE)
        VALUES (v_employee_id, v_first_name, v_last_name, v_email, v_department_id, v_hire_date);
    END LOOP;

    -- Insert employee phones
    FOR i IN 1 .. 10 LOOP
        v_employee_id := i;
        FOR j IN 1 .. 2 LOOP
            v_phone := TO_CHAR(TRUNC(DBMS_RANDOM.VALUE(1000000000, 9999999999)));
            INSERT INTO EMPLOYEE_PHONE (EMPLOYEE_PHONE_ID, EMPLOYEE_ID, PHONE_TYPE, PHONE_NUMBER)
            VALUES (i * 10 + j, v_employee_id, random_string(5), v_phone);
        END LOOP;
    END LOOP;

    -- Insert clients
    FOR i IN 1 .. 10 LOOP
        v_client_id := i;
        v_first_name := random_string(5);
        v_last_name := random_string(7);
        v_email := v_first_name || '.' || v_last_name || '@client.com';

        INSERT INTO CLIENT (CLIENT_ID, FIRST_NAME, LAST_NAME, EMAIL_ADDRESS)
        VALUES (v_client_id, v_first_name, v_last_name, v_email);
    END LOOP;

    -- Insert client names
    FOR i IN 1 .. 10 LOOP
        v_client_id := i;
        v_first_name := random_string(5);
        v_last_name := random_string(7);
        INSERT INTO CLIENT_NAME (CLIENT_NAME_ID, CLIENT_ID, FIRST_NAME, LAST_NAME)
        VALUES (i, v_client_id, v_first_name, v_last_name);
    END LOOP;

    -- Insert guitars
    FOR i IN 1 .. 10 LOOP
        v_guitar_id := i;
        v_client_id := TRUNC(DBMS_RANDOM.VALUE(1, 11));

        INSERT INTO GUITAR (GUITAR_ID, OWNER_ID, MAKE, MODEL, TYPE, PRICE, CONDITION)
        VALUES (v_guitar_id, v_client_id, random_string(10), random_string(10), random_string(5), TRUNC(DBMS_RANDOM.VALUE(100, 1000)), random_string(5));
    END LOOP;

    -- Insert photos
    FOR i IN 1 .. 10 LOOP
        v_photo_id := i;
        v_guitar_id := TRUNC(DBMS_RANDOM.VALUE(1, 11));

        INSERT INTO PHOTO (PHOTO_ID, GUITAR_ID, URL, DESCRIPTION, DATE_TAKEN)
        VALUES (v_photo_id, v_guitar_id, 'http://example.com/photo' || v_photo_id, random_string(20), random_date);
    END LOOP;

    -- Insert durations
    FOR i IN 1 .. 10 LOOP
        v_duration_id := i;

        INSERT INTO DURATION (DURATION_ID, START_DATE, END_DATE, TYPE, NOTE)
        VALUES (v_duration_id, random_date, random_date + TRUNC(DBMS_RANDOM.VALUE(1, 30)), random_string(5), random_string(20));
    END LOOP;

    -- Insert maintenance
    FOR i IN 1 .. 10 LOOP
        v_maintenance_id := i;
        v_guitar_id := TRUNC(DBMS_RANDOM.VALUE(1, 11));

        INSERT INTO MAINTENANCE (MAINTENANCE_ID, GUITAR_ID, COST, DESCRIPTION)
        VALUES (v_maintenance_id, v_guitar_id, TRUNC(DBMS_RANDOM.VALUE(50, 500)), random_string(20));
    END LOOP;

    -- Insert maintenance durations
    FOR i IN 1 .. 10 LOOP
        v_maintenance_id := i;
        v_duration_id := i;

        INSERT INTO MAINTENANCE_DURATION (MAINTENANCE_DURATION_ID, MAINTENANCE_ID, DURATION_ID)
        VALUES (i, v_maintenance_id, v_duration_id);
    END LOOP;

    -- Insert employee maintenance relations
    FOR i IN 1 .. 10 LOOP
        v_employee_id := i;
        v_maintenance_id := TRUNC(DBMS_RANDOM.VALUE(1, 11));

        INSERT INTO EMPLOYEE_MAINTENANCE_RELATION (EMPLOYEE_MAINTENANCE_RELATION_ID, EMPLOYEE_ID, MAINTENANCE_ID)
        VALUES (i, v_employee_id, v_maintenance_id);
    END LOOP;

    -- Insert customer data
    FOR i IN 1 .. 10 LOOP
        v_customer_id := i;
        INSERT INTO CUSTOMER (CUSTOMER_ID, NAME, CONTACT)
        VALUES (v_customer_id, random_string(10), random_string(15));
    END LOOP;

    -- Insert guitar ownership
    FOR i IN 1 .. 10 LOOP
        v_guitar_id := i;
        v_customer_id := TRUNC(DBMS_RANDOM.VALUE(1, 11));

        INSERT INTO GUITAR_OWNER (GUITAR_OWNER_ID, GUITAR_ID, CUSTOMER_ID)
        VALUES (i, v_guitar_id, v_customer_id);
    END LOOP;

    -- Insert guitar names
    FOR i IN 1 .. 10 LOOP
        v_guitar_id := i;
        v_name_id := i;

        INSERT INTO GUITAR_NAME (GUITAR_NAME_ID, GUITAR_ID, NAME)
        VALUES (i, v_guitar_id, random_string(10));
    END LOOP;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Package EMPLOYEE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "GROUP1"."EMPLOYEE_PKG" AS

  PROCEDURE change_phone(new_employee_id  in t_employee.employee_id%type,
                         new_phone_type   in t_phone.phone_type%type,
                         new_phone_number in t_phone.phone_number%type);
  FUNCTION new_employee(new_employee_id   OUT varchar2,
                        new_name          IN t_employee.name%type,
                        new_phone_type    IN t_phone.phone_type%type,
                        new_phone_number  IN t_phone.phone_number%type,
                        new_email_address IN t_employee.email_address%type,
                        new_department_id IN t_department.department_id%type)
    RETURN varchar2;
  FUNCTION delete_employee(new_employee_id in t_employee.employee_id%type)
    return varchar2;
END employee_pkg;

/
--------------------------------------------------------
--  DDL for Package MAINTENANCE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "GROUP1"."MAINTENANCE_PKG" AS

  PROCEDURE change_duration(new_maintenance_id in t_maintenance.maintenance_id%type,
                            new_start_date     in t_duration.start_date%type,
                            new_end_date       in t_duration.end_date%type);
  FUNCTION new_maintenance(new_maintenance_id OUT varchar2,
                           new_start_date     IN t_duration.start_date%type,
                           new_end_date       IN t_duration.end_date%type,
                           new_cost           IN t_maintenance.cost%type,
                           new_description    IN t_maintenance.description%type,
                           new_status         IN t_maintenance.status%type,
                           new_guitar_id      in t_maintenance.guitar_id%type)
    RETURN varchar2;
  FUNCTION delete_maintenance(new_maintenance_id in t_maintenance.maintenance_id%type)
    return varchar2;
END maintenance_pkg;

/
--------------------------------------------------------
--  DDL for Package OWNER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "GROUP1"."OWNER_PKG" AS

  PROCEDURE change_name(new_client_id  in t_client.client_id%type,
                        new_first_name in t_name.first_name%type,
                        new_last_name  in t_name.last_name%type);
  FUNCTION new_owner(new_client_id     OUT varchar2,
                     new_gender        IN t_client.gender%type,
                     new_phone_number  IN t_client.phone_number%type,
                     new_email_address IN t_client.email_address%type,
                     new_address       IN t_client.address%type,
                     new_birthday      IN t_owner.birthday%type,
                     new_profession    IN t_owner.profession%type,
                     new_social_media  IN t_owner.social_media%type,
                     new_first_name    in t_name.first_name%type,
                     new_last_name     in t_name.last_name%type)
    RETURN varchar2;
  FUNCTION detele_owner(new_client_id in t_client.client_id%type)
    return varchar2;
END owner_pkg;

/
--------------------------------------------------------
--  DDL for Package Body EMPLOYEE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "GROUP1"."EMPLOYEE_PKG" AS

  procedure change_phone(new_employee_id  in t_employee.employee_id%type,
                         new_phone_type   in t_phone.phone_type%type,
                         new_phone_number in t_phone.phone_number%type) IS
    v_phone_new_id number;
    v_phone_old_id number;
    v_count        number;
  BEGIN
    v_phone_new_id := phone_seq.nextval;
    insert into t_phone
      (phone_id, phone_type, phone_number)
    values
      (v_phone_new_id, new_phone_type, new_phone_number);
  
    select count(*)
      into v_count
      from t_employee_phone
     where employee_id = new_employee_id
       and end_date is null;
  
    if v_count != 0 then
      select phone_id
        into v_phone_old_id
        from t_employee_phone
       where employee_id = new_employee_id
         and end_date is null;
      update t_employee_phone
         set end_date = sysdate
       where phone_id = v_phone_old_id;
    
    end if;
    insert into t_employee_phone
      (employee_phone_id, start_date, employee_id, phone_id)
    values
      (employee_phone_seq.nextval,
       sysdate,
       new_employee_id,
       v_phone_new_id);
  end;

  function new_employee(new_employee_id   OUT varchar2,
                        new_name          IN t_employee.name%type,
                        new_phone_type    IN t_phone.phone_type%type,
                        new_phone_number  IN t_phone.phone_number%type,
                        new_email_address IN t_employee.email_address%type,
                        new_department_id IN t_department.department_id%type)
    return varchar2 is
  begin
    new_employee_id := employee_seq.nextval;
  
    INSERT INTO t_employee
      (employee_id, name, email_address, department_id)
    VALUES
      (new_employee_id, new_name, new_email_address, new_department_id);
  
    if new_phone_type is not null and new_phone_number is not null then
      change_phone(new_employee_id, new_phone_type, new_phone_number);
    end if;
    RETURN new_employee_id;
  end;

  FUNCTION delete_employee(new_employee_id in t_employee.employee_id%type)
    return varchar2 is
  begin
    delete from t_phone tp
     where tp.phone_id in
           (select tep.phone_id
              from t_employee_phone tep
             where tep.employee_id = new_employee_id);
    delete from t_employee_phone tep
     where tep.employee_id = new_employee_id;
    delete from t_employee te where te.employee_id = new_employee_id;
    return new_employee_id;
  end;
end;

/
--------------------------------------------------------
--  DDL for Package Body MAINTENANCE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "GROUP1"."MAINTENANCE_PKG" AS

  procedure change_duration(new_maintenance_id in t_maintenance.maintenance_id%type,
                            new_start_date     in t_duration.start_date%type,
                            new_end_date       in t_duration.end_date%type) IS
    v_duration_new_id number;
    v_duration_old_id number;
    v_count           number;
  BEGIN
    v_duration_new_id := duration_seq.nextval;
    insert into t_duration
      (duration_id, start_date, end_date)
    values
      (v_duration_new_id, new_start_date, new_end_date);
  
    select count(*)
      into v_count
      from t_maintenance_duration
     where maintenance_id = new_maintenance_id
       and end_date is null;
  
    if v_count != 0 then
      select duration_id
        into v_duration_old_id
        from t_maintenance_duration
       where maintenance_id = new_maintenance_id
         and end_date is null;
      update t_maintenance_duration
         set end_date = sysdate
       where duration_id = v_duration_old_id;
    
    end if;
    insert into t_maintenance_duration
      (maintenance_duration_id, start_date, maintenance_id, duration_id)
    values
      (maintenance_duration_seq.nextval,
       sysdate,
       new_maintenance_id,
       v_duration_new_id);
  end;

  function new_maintenance(new_maintenance_id OUT varchar2,
                           new_start_date     IN t_duration.start_date%type,
                           new_end_date       IN t_duration.end_date%type,
                           new_cost           IN t_maintenance.cost%type,
                           new_description    IN t_maintenance.description%type,
                           new_status         IN t_maintenance.status%type,
                           new_guitar_id      in t_maintenance.guitar_id%type)
    return varchar2 is
  begin
    new_maintenance_id := maintenance_seq.nextval;
  
    INSERT INTO t_maintenance
      (maintenance_id, cost, description, status, guitar_id)
    VALUES
      (new_maintenance_id,
       new_cost,
       new_description,
       new_status,
       new_guitar_id);
  
    if new_start_date is not null and new_end_date is not null then
      change_duration(new_maintenance_id, new_start_date, new_end_date);
    end if;
    RETURN new_maintenance_id;
  end;

  FUNCTION delete_maintenance(new_maintenance_id in t_maintenance.maintenance_id%type)
    return varchar2 is
  begin
    delete from t_duration tp
     where tp.duration_id in
           (select tep.duration_id
              from t_maintenance_duration tep
             where tep.maintenance_id = new_maintenance_id);
    delete from t_maintenance_duration tep
     where tep.maintenance_id = new_maintenance_id;
    delete from t_maintenance te
     where te.maintenance_id = new_maintenance_id;
    return new_maintenance_id;
  end;
end;

/
--------------------------------------------------------
--  DDL for Package Body OWNER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "GROUP1"."OWNER_PKG" AS

  procedure change_name(new_client_id  in t_client.client_id%type,
                        new_first_name in t_name.first_name%type,
                        new_last_name  in t_name.last_name%type) IS
    v_name_new_id number;
    v_name_old_id number;
    v_count       number;
  BEGIN
    v_name_new_id := name_seq.nextval;
    insert into t_name
      (name_id, first_name, last_name)
    values
      (v_name_new_id, new_first_name, new_last_name);
  
    select count(*)
      into v_count
      from t_client_name
     where client_id = new_client_id
       and end_date is null;
  
    if v_count != 0 then
      select name_id
        into v_name_old_id
        from t_client_name
       where client_id = new_client_id
         and end_date is null;
      update t_client_name
         set end_date = sysdate
       where name_id = v_name_old_id;
    
    end if;
    insert into t_client_name
      (client_name_id, start_date, client_id, name_id)
    values
      (client_name_seq.nextval, sysdate, new_client_id, v_name_new_id);
  end;

  function new_owner(new_client_id     OUT varchar2,
                     new_gender        IN t_client.gender%type,
                     new_phone_number  IN t_client.phone_number%type,
                     new_email_address IN t_client.email_address%type,
                     new_address       IN t_client.address%type,
                     new_birthday      IN t_owner.birthday%type,
                     new_profession    IN t_owner.profession%type,
                     new_social_media  IN t_owner.social_media%type,
                     new_first_name    in t_name.first_name%type,
                     new_last_name     in t_name.last_name%type)
    return varchar2 is
  begin
    new_client_id := client_seq.nextval;
  
    INSERT INTO t_client
      (client_id, gender, phone_number, email_address, address)
    VALUES
      (new_client_id,
       new_gender,
       new_phone_number,
       new_email_address,
       new_address);
  
    INSERT INTO t_owner
      (owner_id, birthday, profession, social_media, client_id)
    VALUES
      (owner_seq.nextval,
       new_birthday,
       new_profession,
       new_social_media,
       new_client_id);
  
    if new_first_name is not null and new_last_name is not null then
      change_name(new_client_id, new_first_name, new_last_name);
    end if;
    RETURN new_client_id;
  end;

  FUNCTION detele_owner(new_client_id in t_client.client_id%type)
    return varchar2 is
  begin
    delete from t_name tn
     where tn.name_id in (select tcn.name_id
                            from t_client_name tcn
                           where tcn.client_id = client_id);
    delete from t_client_name tcn where tcn.client_id = new_client_id;
    delete from t_owner tow where tow.client_id = new_client_id;
    delete from t_client tc where tc.client_id = new_client_id;
    return new_client_id;
  end;
end;

/
--------------------------------------------------------
--  Constraints for Table T_EMPLOYEE_PHONE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" MODIFY ("EMPLOYEE_PHONE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" MODIFY ("EMPLOYEE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" MODIFY ("PHONE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" ADD CONSTRAINT "PK_EMPLOYEE_PHONE" PRIMARY KEY ("EMPLOYEE_PHONE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DEPARTMENT
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_DEPARTMENT" MODIFY ("DEPARTMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_DEPARTMENT" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_DEPARTMENT" ADD CONSTRAINT "PK_T_DEPARTMENT" PRIMARY KEY ("DEPARTMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MAINTENANCE_DURATION
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" MODIFY ("MAINTENANCE_DURATION_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" MODIFY ("DURATION_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" MODIFY ("MAINTENANCE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" ADD CONSTRAINT "PK_MAINTENANCE_DURATION" PRIMARY KEY ("MAINTENANCE_DURATION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_EMPLOYEE_MAINTENANCE_RELATION
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" MODIFY ("MAINTENANCE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" MODIFY ("EMPLOYEE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" ADD CONSTRAINT "PK_T_EMPLOYEE_MAINTENANCE_RELATION" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CLIENT
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_CLIENT" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CLIENT" ADD CONSTRAINT "PK_T_CLIENT" PRIMARY KEY ("CLIENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_OWNER
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_OWNER" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_OWNER" MODIFY ("BIRTHDAY" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_OWNER" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_OWNER" ADD CONSTRAINT "PK_T_OWNER" PRIMARY KEY ("OWNER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_PHONE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_PHONE" MODIFY ("PHONE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHONE" MODIFY ("PHONE_TYPE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHONE" MODIFY ("PHONE_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHONE" ADD CONSTRAINT "PK_T_PHONE" PRIMARY KEY ("PHONE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CUSTOMER
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_CUSTOMER" MODIFY ("CUSTOMER_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CUSTOMER" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CUSTOMER" ADD CONSTRAINT "PK_T_CUSTOMER" PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_DURATION
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_DURATION" MODIFY ("DURATION_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_DURATION" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_DURATION" MODIFY ("END_DATE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_DURATION" ADD CONSTRAINT "PK_DURATION" PRIMARY KEY ("DURATION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_CLIENT_NAME
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_CLIENT_NAME" MODIFY ("CLIENT_NAME_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CLIENT_NAME" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CLIENT_NAME" MODIFY ("NAME_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CLIENT_NAME" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_CLIENT_NAME" ADD CONSTRAINT "PK_CLIENT_NAME" PRIMARY KEY ("CLIENT_NAME_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE" MODIFY ("EMPLOYEE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_EMPLOYEE" ADD CONSTRAINT "PK_T_EMPLOYEE" PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_GUITAR
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_GUITAR" MODIFY ("GUITAR_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_GUITAR" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_GUITAR" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_GUITAR" ADD CONSTRAINT "PK_T_GUITAR" PRIMARY KEY ("GUITAR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MAINTENANCE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_MAINTENANCE" MODIFY ("MAINTENANCE_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE" MODIFY ("GUITAR_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_MAINTENANCE" ADD CONSTRAINT "PK_T_MAINTENANCE" PRIMARY KEY ("MAINTENANCE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_NAME
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_NAME" MODIFY ("NAME_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_NAME" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_NAME" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_NAME" ADD CONSTRAINT "PK_T_NAME" PRIMARY KEY ("NAME_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_PHOTO
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_PHOTO" MODIFY ("PHOTO_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHOTO" MODIFY ("GUITAR_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHOTO" MODIFY ("URL" NOT NULL ENABLE);
  ALTER TABLE "GROUP1"."T_PHOTO" ADD CONSTRAINT "PK_T_PHOTO" PRIMARY KEY ("PHOTO_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_CLIENT_NAME
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_CLIENT_NAME" ADD CONSTRAINT "FK_CLIENT_NAME_NAME" FOREIGN KEY ("NAME_ID")
	  REFERENCES "GROUP1"."T_NAME" ("NAME_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "GROUP1"."T_CLIENT_NAME" ADD CONSTRAINT "FK_CLIENT_NAME_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "GROUP1"."T_CLIENT" ("CLIENT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_CUSTOMER
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_CUSTOMER" ADD CONSTRAINT "FK_T_CUSTOMER_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "GROUP1"."T_CLIENT" ("CLIENT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE" ADD CONSTRAINT "FK_T_EMPLOYEE_DEPARTMENT" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "GROUP1"."T_DEPARTMENT" ("DEPARTMENT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_EMPLOYEE_MAINTENANCE_RELATION
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" ADD CONSTRAINT "FK__T_EMPLOYEE_MAINTENANCE_RELATION_EMPLOYEE" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "GROUP1"."T_EMPLOYEE" ("EMPLOYEE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "GROUP1"."T_EMPLOYEE_MAINTENANCE_RELATION" ADD CONSTRAINT "FK__T_EMPLOYEE_MAINTENANCE_RELATION_MAINTENANCE" FOREIGN KEY ("MAINTENANCE_ID")
	  REFERENCES "GROUP1"."T_MAINTENANCE" ("MAINTENANCE_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_EMPLOYEE_PHONE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" ADD CONSTRAINT "FK_EMPLOYEE_PHONE_EMPLOYEE" FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "GROUP1"."T_EMPLOYEE" ("EMPLOYEE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "GROUP1"."T_EMPLOYEE_PHONE" ADD CONSTRAINT "FK_EMPLOYEE_PHONE_PHONE" FOREIGN KEY ("PHONE_ID")
	  REFERENCES "GROUP1"."T_PHONE" ("PHONE_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_GUITAR
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_GUITAR" ADD CONSTRAINT "FK_T_GUITAR_OWNER" FOREIGN KEY ("OWNER_ID")
	  REFERENCES "GROUP1"."T_OWNER" ("OWNER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_MAINTENANCE
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_MAINTENANCE" ADD CONSTRAINT "FK_T_MAINTENANCE_GUITAR" FOREIGN KEY ("GUITAR_ID")
	  REFERENCES "GROUP1"."T_GUITAR" ("GUITAR_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_MAINTENANCE_DURATION
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" ADD CONSTRAINT "FK_MAINTENANCE_DURATION_DURATION" FOREIGN KEY ("DURATION_ID")
	  REFERENCES "GROUP1"."T_DURATION" ("DURATION_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "GROUP1"."T_MAINTENANCE_DURATION" ADD CONSTRAINT "FK_MAINTENANCE_DURATION_MAINTENANCE" FOREIGN KEY ("MAINTENANCE_ID")
	  REFERENCES "GROUP1"."T_MAINTENANCE" ("MAINTENANCE_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_OWNER
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_OWNER" ADD CONSTRAINT "FK_T_OWNER_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "GROUP1"."T_CLIENT" ("CLIENT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table T_PHOTO
--------------------------------------------------------

  ALTER TABLE "GROUP1"."T_PHOTO" ADD CONSTRAINT "FK_T_PHOTO_GUITAR" FOREIGN KEY ("GUITAR_ID")
	  REFERENCES "GROUP1"."T_GUITAR" ("GUITAR_ID") ON DELETE CASCADE ENABLE;
